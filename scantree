#!/usr/bin/python

import sys
import os
from optparse import OptionParser
from Crypto.Hash import MD5
import csv
import stat

def md5sum(p,bc=0):
    bsize = 1024*1024*128

    assert(bsize > bc)

    if bc: bsize = bc

    m = MD5.new()

    try:
        f = os.open(p,os.O_RDONLY)
    except Exception,e:
        return None

    while True:
        try:
            buffer = os.read(f,bsize)
        except Exception,e:
            try:
                os.close(f)
            except:
                pass
            return None

        if not buffer:
            break
        m.update(buffer)

        if bc:
            break

    os.close(f)

    return m.hexdigest()


class Finder(object):

    def __init__(self):
        self._verbose = False
        pass

    def _parser(self):
        p = OptionParser(usage="%prog [options] A B")
        p.add_option("-v","--verbose",help="Be more verbose",
            dest="verbose",action="store_true")

    def parser(self):
        return self._parser()

    def parse_args(self,args):

        p = self.parser()
        (opts,args) = p.parse_args()

        self._verbose = opts.verbose

        opts.args = args

        return opts

    def main(self,args=None):

        if not args: args = sys.argv[1:]

        opts = self.parse_args(args)

    def verbose(self,m):
       if self._verbose: print m

    data_format = """

path (relative to root of tree),mtime of file, size of file, short md5, full md5

    Path relative to the root of the tree being scanned
    mtime as seconds since epoch
    size in bytes
    short md5 is md5sum of first 64k of file
    long md5 is md5sum of entire file


The data file needs to be updated if any file in the tree is
    - newer than the data file
    - newer than the mtime recorded in the file
    - missing
    - not listed

    
"""


    def load_and_update(self,dir,listpath):
        """ Load a set of cached data, update it if necessary """


        pass



    def makesums(self,r):
        for (d,k,fs) in os.walk(r):
            self.verbose("dir %s" % (d))

            for f in fs:
                p = os.path.join(d,f)
                if not os.path.isfile(p): continue
                self.verbose("  %s" % (f))
                s = os.stat(p)
                fmt = int(s[stat.ST_MTIME])
                size = s[stat.ST_SIZE]


                shortmd5 = md5sum(p,4096)

                if size <= 4096:
                    longmd5 = shortmd5
                else:
                    longmd5 = md5sum(p)

                print p,fmt,size,shortmd5,longmd5



if __name__ == "__main__":
    f = Finder()

    for r in sys.argv[1:]:
        f.makesums(r)


